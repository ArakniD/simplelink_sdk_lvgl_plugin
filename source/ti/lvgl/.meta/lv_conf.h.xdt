%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== lv_conf.h.xdt ========
 */
var displaymodule = system.modules['/ti/lvgl/lvgldisplay'];
var staticinstance = displaymodule.$static;
for(var i = 0; i < displaymodule.$instances.length; i++) {
    var instance = displaymodule.$instances[i];
%%}
/**
 * @file lv_conf.h
 *
 *  DO NOT EDIT - This file is generated by the SysConfig tool.
 */

/*
 * COPY THIS FILE AS ``lv_conf.h`` NEXT TO the ``lvgl`` FOLDER
 */

#ifndef LV_CONF_H
#define LV_CONF_H
/* clang-format off */

#include <stdint.h>

/*====================
   Graphical settings
 *====================*/

/* Maximal horizontal and vertical resolution to support by the library.*/
#define LV_HOR_RES_MAX          (`staticinstance.horResMax`)
#define LV_VER_RES_MAX          (`staticinstance.verResMax`)

/* Color depth:
 * - 1:  1 byte per pixel
 * - 8:  RGB233
 * - 16: RGB565
 * - 32: ARGB8888
 */
#define LV_COLOR_DEPTH     `instance.colorDepth`

/* Swap the 2 bytes of RGB565 color.
 * Useful if the display has a 8 bit interface (e.g. SPI)*/
#define LV_COLOR_16_SWAP   `+staticinstance.color16Swap`

/* 1: Enable screen transparency.
 * Useful for OSD or other overlapping GUIs.
 * Requires ``LV_COLOR_DEPTH = 32`` colors and the screen's style should be modified: ``style.body.opa = ...``*/
#define LV_COLOR_SCREEN_TRANSP    `+staticinstance.screenTransp`

/*Images pixels with this color will not be drawn (with chroma keying)*/
/*default = LV_COLOR_LIME: pure green*/
#define LV_COLOR_TRANSP    `staticinstance.colorTransp`

/* Enable anti-aliasing (lines, and radiuses will be smoothed) */
#define LV_ANTIALIAS        `+staticinstance.enableAntiAlias`

/* Default display refresh period.
 * Can be changed in the display driver (``lv_disp_drv_t``).*/
#define LV_DISP_DEF_REFR_PERIOD      `staticinstance.defRefreshPeriod`      /*[ms]*/

/* Dot Per Inch: used to initialize default sizes.
 * E.g. a button with width = LV_DPI / 2 -> half inch wide
 * (Not so important, you can adjust it to modify default sizes and spaces)*/
#define LV_DPI              `staticinstance.dpi`     /*[px]*/

/* Type of coordinates. Should be ``int16_t`` (or ``int32_t`` for extreme cases) */
typedef `staticinstance.coordType` lv_coord_t;

/*=========================
   Memory manager settings
 *=========================*/

/* LittelvGL's internal memory manager's settings.
 * The graphical objects and other related data are stored here. */

/* 1: use custom malloc/free, 0: use the built-in ``lv_mem_alloc`` and ``lv_mem_free`` */
#define LV_MEM_CUSTOM      `+staticinstance.memCustom`
#if LV_MEM_CUSTOM == 0
/* Size of the memory used by ``lv_mem_alloc`` in bytes (>= 2kB)*/
#  define LV_MEM_SIZE    (`staticinstance.memSize`)

/* Complier prefix for a big array declaration */
#  define LV_MEM_ATTR    `staticinstance.memAttr`

/* Set an address for the memory pool instead of allocating it as an array.
 * Can be in external SRAM too. */
#  define LV_MEM_ADR          `staticinstance.memAdr`

/* Automatically defrag. on free. Defrag. means joining the adjacent free cells. */
#  define LV_MEM_AUTO_DEFRAG  `+staticinstance.memAutoDefrag`
#else       /*LV_MEM_CUSTOM*/
#  define LV_MEM_CUSTOM_INCLUDE <`staticinstance.memCustomInclude`>   /*Header for the dynamic memory function*/
#  define LV_MEM_CUSTOM_ALLOC   `staticinstance.memCustomAlloc`       /*Wrapper to malloc*/
#  define LV_MEM_CUSTOM_FREE    `staticinstance.memCustomFree`         /*Wrapper to free*/
#endif     /*LV_MEM_CUSTOM*/

/* Garbage Collector settings
 * Used if lvgl is binded to higher level language and the memory is managed by that language */
#define LV_ENABLE_GC `+staticinstance.enableGC`
#if LV_ENABLE_GC != 0
#  define LV_GC_INCLUDE "`staticinstance.gcInclude`"                           /*Include Garbage Collector related things*/
#  define LV_MEM_CUSTOM_REALLOC   `staticinstance.memCustomRealloc`           /*Wrapper to realloc*/
#  define LV_MEM_CUSTOM_GET_SIZE  `staticinstance.memCustomGetSize`      /*Wrapper to lv_mem_get_size*/
#endif /* LV_ENABLE_GC */

/*=======================
   Input device settings
 *=======================*/

/* Input device default settings.
 * Can be changed in the Input device driver (``lv_indev_drv_t``)*/

/* Input device read period in milliseconds */
#define LV_INDEV_DEF_READ_PERIOD          `staticinstance.indevReadPeriod`

/* Drag threshold in pixels */
#define LV_INDEV_DEF_DRAG_LIMIT           `staticinstance.indevDragLimit`

/* Drag throw slow-down in [%]. Greater value -> faster slow-down */
#define LV_INDEV_DEF_DRAG_THROW           `staticinstance.indevDragThrow`

/* Long press time in milliseconds.
 * Time to send ``LV_EVENT_LONG_PRESSSED``) */
#define LV_INDEV_DEF_LONG_PRESS_TIME      `staticinstance.indevLongPressTime`

/* Repeated trigger period in long press [ms]
 * Time between ``LV_EVENT_LONG_PRESSED_REPEAT */
#define LV_INDEV_DEF_LONG_PRESS_REP_TIME  `staticinstance.indevLongPressRepTime`

/*==================
 * Feature usage
 *==================*/

/*1: Enable the Animations */
#define LV_USE_ANIMATION        `+staticinstance.useAnimation`
#if LV_USE_ANIMATION

/*Declare the type of the user data of animations (can be e.g. ``void *``, ``int``, ``struct``)*/
typedef void * lv_anim_user_data_t;

#endif

/* 1: Enable shadow drawing*/
#define LV_USE_SHADOW           `+staticinstance.useShadow`

/* 1: Enable object groups (for keyboard/encoder navigation) */
#define LV_USE_GROUP            `+staticinstance.useGroup`
#if LV_USE_GROUP
typedef void * lv_group_user_data_t;
#endif  /*LV_USE_GROUP*/

/* 1: Enable GPU interface*/
#define LV_USE_GPU              `+staticinstance.useGPU`

/* 1: Enable file system (might be required for images */
#define LV_USE_FILESYSTEM       `+staticinstance.useFileSystem`
#if LV_USE_FILESYSTEM
/*Declare the type of the user data of file system drivers (can be e.g. ``void *``, ``int``, ``struct``)*/
typedef void * lv_fs_drv_user_data_t;
#endif

/*1: Add a ``user_data`` to drivers and objects*/
#define LV_USE_USER_DATA        `+staticinstance.useUserData`

/*========================
 * Image decoder and cache
 *========================*/

/* 1: Enable indexed (palette) images */
#define LV_IMG_CF_INDEXED       `+staticinstance.imgIndexed`

/* 1: Enable alpha indexed images */
#define LV_IMG_CF_ALPHA         `+staticinstance.imgAlpha`

/* Default image cache size. Image caching keeps the images opened.
 * If only the built-in image formats are used there is no real advantage of caching.
 * (I.e. no new image decoder is added)
 * With complex image decoders (e.g. PNG or JPG) caching can save the continuous open/decode of images.
 * However the opened images might consume additional RAM.
 * LV_IMG_CACHE_DEF_SIZE must be >= 1 */
#define LV_IMG_CACHE_DEF_SIZE       `staticinstance.imgCacheSize`

/*Declare the type of the user data of image decoder (can be e.g. ``void *``, ``int``, ``struct``)*/
typedef void * lv_img_decoder_user_data_t;

/*=====================
 *  Compiler settings
 *====================*/
/* Define a custom attribute to ``lv_tick_inc`` function */
#define LV_ATTRIBUTE_TICK_INC    `staticinstance.attributeTickInc`

/* Define a custom attribute to ``lv_task_handler`` function */
#define LV_ATTRIBUTE_TASK_HANDLER    `staticinstance.attributeTaskHandler`

/* With size optimization (-Os) the compiler might not align data to
 * 4 or 8 byte boundary. This alignment will be explicitly applied where needed.
 * E.g. __attribute__((aligned(4))) */
#define LV_ATTRIBUTE_MEM_ALIGN    `staticinstance.attributeMemAlign`

/* Attribute to mark large constant arrays for example
 * font's bitmaps */
#define LV_ATTRIBUTE_LARGE_CONST    `staticinstance.attributeLargeConstArray`

/*===================
 *  HAL settings
 *==================*/

/* 1: use a custom tick source.
 * It removes the need to manually update the tick with ``lv_tick_inc``) */
#define LV_TICK_CUSTOM     `+staticinstance.tickCustom`
#if LV_TICK_CUSTOM == 1
#define LV_TICK_CUSTOM_INCLUDE  "`staticinstance.tickCustomInclude`"       /*Header for the sys time function*/
#define LV_TICK_CUSTOM_SYS_TIME_EXPR (`staticinstance.tickCustomSysTimeExpr`)     /*Expression evaluating to current systime in ms*/
#endif   /*LV_TICK_CUSTOM*/

typedef void * lv_disp_drv_user_data_t;             /*Type of user data in the display driver*/
typedef void * lv_indev_drv_user_data_t;            /*Type of user data in the input device driver*/

/*================
 * Log settings
 *===============*/

/*1: Enable the log module*/
#define LV_USE_LOG      `+staticinstance.useLog`
#if LV_USE_LOG
/* How important log should be added:
 * LV_LOG_LEVEL_TRACE       A lot of logs to give detailed information
 * LV_LOG_LEVEL_INFO        Log important events
 * LV_LOG_LEVEL_WARN        Log if something unwanted happened but didn't cause a problem
 * LV_LOG_LEVEL_ERROR       Only critical issue, when the system may fail
 */
#  define LV_LOG_LEVEL    `staticinstance.logLevel`

/* 1: Print the log with 'printf';
 * 0: user need to register a callback with ``lv_log_register_print``*/
#  define LV_LOG_PRINTF   `+staticinstance.logPrintf`
#endif  /*LV_USE_LOG*/

/*================
 *  THEME USAGE
 *================*/
#define LV_THEME_LIVE_UPDATE    `+staticinstance.themeLiveUpdate`   /*1: Allow theme switching at run time. Uses 8..10 kB of RAM*/

#define LV_USE_THEME_TEMPL      `+staticinstance.themes.includes("templ")`   /*Just for test*/
#define LV_USE_THEME_DEFAULT    `+staticinstance.themes.includes("default")`   /*Built mainly from the built-in styles. Consumes very few RAM*/
#define LV_USE_THEME_ALIEN      `+staticinstance.themes.includes("alien")`   /*Dark futuristic theme*/
#define LV_USE_THEME_NIGHT      `+staticinstance.themes.includes("night")`   /*Dark elegant theme*/
#define LV_USE_THEME_MONO       `+staticinstance.themes.includes("mono")`   /*Mono color theme for monochrome displays*/
#define LV_USE_THEME_MATERIAL   `+staticinstance.themes.includes("material")`   /*Flat theme with bold colors and light shadows*/
#define LV_USE_THEME_ZEN        `+staticinstance.themes.includes("zen")`   /*Peaceful, mainly light theme */
#define LV_USE_THEME_NEMO       `+staticinstance.themes.includes("nemo")`   /*Water-like theme based on the movie "Finding Nemo"*/

/*==================
 *    FONT USAGE
 *===================*/

/* The built-in fonts contains the ASCII range and some Symbols with  4 bit-per-pixel.
 * The symbols are available via ``LV_SYMBOL_...`` defines
 * More info about fonts: https://docs.littlevgl.com/#Fonts
 * To create a new font go to: https://littlevgl.com/ttf-font-to-c-array
 */

/* Robot fonts with bpp = 4
 * https://fonts.google.com/specimen/Roboto  */
#define LV_FONT_ROBOTO_12    `+staticinstance.builtInFonts.includes("fontRoboto12")`
#define LV_FONT_ROBOTO_16    `+staticinstance.builtInFonts.includes("fontRoboto16")`
#define LV_FONT_ROBOTO_22    `+staticinstance.builtInFonts.includes("fontRoboto22")`
#define LV_FONT_ROBOTO_28    `+staticinstance.builtInFonts.includes("fontRoboto28")`

/*Pixel perfect monospace font
 * http://pelulamu.net/unscii/ */
#define LV_FONT_UNSCII_8     `+staticinstance.builtInFonts.includes("fontUnscii8")`

/* Optionally declare your custom fonts here.
 * You can use these fonts as default font too
 * and they will be available globally. E.g.
 * #define LV_FONT_CUSTOM_DECLARE LV_FONT_DECLARE(my_font_1) \
 *                                LV_FONT_DECLARE(my_font_2)
 */
%%{
var fontCustomDeclare = "";
var customFontsArray = staticinstance.fontCustomDeclare.split(/[ ,]+/);
for(i = 0; i < customFontsArray.length; i++)
{
    if (customFontsArray[i] != "")
    {
        if (i == 0)
        {
            fontCustomDeclare += "LV_FONT_DECLARE(" + customFontsArray[i] + ") \\\n";
        }
        else
        {
            fontCustomDeclare += "                               ";
            fontCustomDeclare += "LV_FONT_DECLARE(" + customFontsArray[i] + ") \\\n";
        }
    }
}
%%}
#define LV_FONT_CUSTOM_DECLARE    `fontCustomDeclare`

/*Always set a default font from the built-in fonts*/
#define LV_FONT_DEFAULT        &`staticinstance.fontDefault`

/*Declare the type of the user data of fonts (can be e.g. ``void *``, ``int``, ``struct``)*/
typedef void * lv_font_user_data_t;

/*=================
 *  Text settings
 *=================*/

/* Select a character encoding for strings.
 * Your IDE or editor should have the same character encoding
 * - LV_TXT_ENC_UTF8
 * - LV_TXT_ENC_ASCII
 * */
#define LV_TXT_ENC `staticinstance.charEncoding`

 /*Can break (wrap) texts on these chars*/
#define LV_TXT_BREAK_CHARS                  "`staticinstance.breakChars`"

/*===================
 *  LV_OBJ SETTINGS
 *==================*/

/*Declare the type of the user data of object (can be e.g. ``void *``, ``int``, ``struct``)*/
typedef void * lv_obj_user_data_t;

/*1: enable ``lv_obj_realign()`` based on ``lv_obj_align()`` parameters*/
#define LV_USE_OBJ_REALIGN          `+staticinstance.objRealign`

/* Enable to make the object clickable on a larger area.
 * LV_EXT_CLICK_AREA_OFF or 0: Disable this feature
 * LV_EXT_CLICK_AREA_TINY: The extra area can be adjusted horizontally and vertically (0..255 px)
 * LV_EXT_CLICK_AREA_FULL: The extra area can be adjusted in all 4 directions (-32k..+32k px)
 */
#define LV_USE_EXT_CLICK_AREA  `staticinstance.objExtraClickArea`

/*==================
 *  LV OBJ X USAGE
 *================*/
/*
 * Documentation of the object types: https://docs.littlevgl.com/#Object-types
 */

/*Arc (dependencies: -)*/
#define LV_USE_ARC      `+staticinstance.simpleObjects.includes("useArc")`

/*Bar (dependencies: -)*/
#define LV_USE_BAR      `+staticinstance.dataObjects.includes("useBar")`

/*Button (dependencies: lv_cont)*/
#define LV_USE_BTN      `+staticinstance.uiObjects.includes("useBtn")`
#if LV_USE_BTN != 0
/*Enable button-state animations - draw a circle on click (dependencies: LV_USE_ANIMATION)*/
#  define LV_BTN_INK_EFFECT   `+staticinstance.btnInkEffect`
#endif

/*Button matrix (dependencies: -)*/
#define LV_USE_BTNM     `+staticinstance.uiObjects.includes("useBtnMatrix")`

/*Calendar (dependencies: -)*/
#define LV_USE_CALENDAR `+staticinstance.dataObjects.includes("useCalendar")`

/*Canvas (dependencies: lv_img)*/
#define LV_USE_CANVAS   `+staticinstance.dataObjects.includes("useCanvas")`

/*Check box (dependencies: lv_btn, lv_label)*/
#define LV_USE_CB       `+staticinstance.uiObjects.includes("useCheckBox")`

/*Chart (dependencies: -)*/
#define LV_USE_CHART    `+staticinstance.dataObjects.includes("useChart")`
#if LV_USE_CHART
#  define LV_CHART_AXIS_TICK_LABEL_MAX_LEN    `staticinstance.chartAxisTickLabelMaxLen`
#endif

/*Container (dependencies: -)*/
#define LV_USE_CONT     `+staticinstance.containerObjects.includes("useCont")`

/*Drop down list (dependencies: lv_page, lv_label, lv_symbol_def.h)*/
#define LV_USE_DDLIST    `+staticinstance.uiObjects.includes("useDDList")`
#if LV_USE_DDLIST != 0
/*Open and close default animation time [ms] (0: no animation)*/
#  define LV_DDLIST_DEF_ANIM_TIME     `staticinstance.ddListAnimTime`
#endif

/*Gauge (dependencies:lv_bar, lv_lmeter)*/
#define LV_USE_GAUGE    `+staticinstance.dataObjects.includes("useGauge")`

/*Image (dependencies: lv_label)*/
#define LV_USE_IMG      `+staticinstance.simpleObjects.includes("useImg")`

/*Image Button (dependencies: lv_btn)*/
#define LV_USE_IMGBTN   `+staticinstance.uiObjects.includes("useImgBtn")`
#if LV_USE_IMGBTN
/*1: The imgbtn requires left, mid and right parts and the width can be set freely*/
#  define LV_IMGBTN_TILED `+staticinstance.imgBtnTiled`
#endif

/*Keyboard (dependencies: lv_btnm)*/
#define LV_USE_KB       `+staticinstance.uiObjects.includes("useKeyboard")`

/*Label (dependencies: -)*/
#define LV_USE_LABEL    `+staticinstance.simpleObjects.includes("useLabel")`
#if LV_USE_LABEL != 0
/*Hor, or ver. scroll speed [px/sec] in 'LV_LABEL_LONG_ROLL/ROLL_CIRC' mode*/
#  define LV_LABEL_DEF_SCROLL_SPEED       `staticinstance.labelScrollSpeed`

/* Waiting period at beginning/end of animation cycle */
#  define LV_LABEL_WAIT_CHAR_COUNT        `staticinstance.labelWaitCharCount`

/*Enable selecting text of the label */
#  define LV_LABEL_TEXT_SEL               `+staticinstance.labelTextSel`

/*Store extra some info in labels (12 bytes) to speed up drawing of very long texts*/
#  define LV_LABEL_LONG_TXT_HINT          `+staticinstance.labelLongTxtHint`
#endif

/*LED (dependencies: -)*/
#define LV_USE_LED      `+staticinstance.dataObjects.includes("useLED")`

/*Line (dependencies: -)*/
#define LV_USE_LINE     `+staticinstance.simpleObjects.includes("useLine")`

/*List (dependencies: lv_page, lv_btn, lv_label, (lv_img optionally for icons ))*/
#define LV_USE_LIST     `+staticinstance.uiObjects.includes("useList")`
#if LV_USE_LIST != 0
/*Default animation time of focusing to a list element [ms] (0: no animation)  */
#  define LV_LIST_DEF_ANIM_TIME  `staticinstance.listFocusTime`
#endif

/*Line meter (dependencies: *;)*/
#define LV_USE_LMETER   `+staticinstance.dataObjects.includes("useLMeter")`

/*Message box (dependencies: lv_rect, lv_btnm, lv_label)*/
#define LV_USE_MBOX     `+staticinstance.dataObjects.includes("useMsgBox")`

/*Page (dependencies: lv_cont)*/
#define LV_USE_PAGE     `+staticinstance.containerObjects.includes("usePage")`
#if LV_USE_PAGE != 0
/*Focus default animation time [ms] (0: no animation)*/
#  define LV_PAGE_DEF_ANIM_TIME     `staticinstance.pageAnimTime`
#endif

/*Preload (dependencies: lv_arc, lv_anim)*/
#define LV_USE_PRELOAD      `+staticinstance.dataObjects.includes("usePreload")`
#if LV_USE_PRELOAD != 0
#  define LV_PRELOAD_DEF_ARC_LENGTH   `staticinstance.preloadArcLength`      /*[deg]*/
#  define LV_PRELOAD_DEF_SPIN_TIME    `staticinstance.preloadSpinTime`    /*[ms]*/
#  define LV_PRELOAD_DEF_ANIM         `staticinstance.preloadAnimType`
#endif

/*Roller (dependencies: lv_ddlist)*/
#define LV_USE_ROLLER    `+staticinstance.uiObjects.includes("useRoller")`
#if LV_USE_ROLLER != 0
/*Focus animation time [ms] (0: no animation)*/
#  define LV_ROLLER_DEF_ANIM_TIME     `staticinstance.rollerAnimTime`

/*Number of extra "pages" when the roller is infinite*/
#  define LV_ROLLER_INF_PAGES         `staticinstance.rollerInfPages`
#endif

/*Slider (dependencies: lv_bar)*/
#define LV_USE_SLIDER    `+staticinstance.uiObjects.includes("useSlider")`

/*Spinbox (dependencies: lv_ta)*/
#define LV_USE_SPINBOX       `+staticinstance.dataObjects.includes("useSpinbox")`

/*Switch (dependencies: lv_slider)*/
#define LV_USE_SW       `+staticinstance.uiObjects.includes("useSwitch")`

/*Text area (dependencies: lv_label, lv_page)*/
#define LV_USE_TA       `+staticinstance.dataObjects.includes("useTA")`
#if LV_USE_TA != 0
#  define LV_TA_DEF_CURSOR_BLINK_TIME `staticinstance.taCursorBlinkTime`     /*ms*/
#  define LV_TA_DEF_PWD_SHOW_TIME     `staticinstance.taPWDShowTime`    /*ms*/
#endif

/*Table (dependencies: lv_label)*/
#define LV_USE_TABLE    `+staticinstance.dataObjects.includes("useTable")`
#if LV_USE_TABLE
#  define LV_TABLE_COL_MAX    `staticinstance.maxTableCol`
#endif

/*Tab (dependencies: lv_page, lv_btnm)*/
#define LV_USE_TABVIEW      `+staticinstance.containerObjects.includes("useTabView")`
#  if LV_USE_TABVIEW != 0
/*Time of slide animation [ms] (0: no animation)*/
#  define LV_TABVIEW_DEF_ANIM_TIME    `staticinstance.tabViewAnimTime`
#endif

/*Tileview (dependencies: lv_page) */
#define LV_USE_TILEVIEW     `+staticinstance.containerObjects.includes("useTileView")`
#if LV_USE_TILEVIEW
/*Time of slide animation [ms] (0: no animation)*/
#  define LV_TILEVIEW_DEF_ANIM_TIME   `staticinstance.tileViewAnimTime`
#endif

/*Window (dependencies: lv_cont, lv_btn, lv_label, lv_img, lv_page)*/
#define LV_USE_WIN      `+staticinstance.containerObjects.includes("useWin")`

/*==================
 * Non-user section
 *==================*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)    /* Disable warnings for Visual Studio*/
#  define _CRT_SECURE_NO_WARNINGS
#endif

/*--END OF LV_CONF_H--*/

/*Be sure every define has a default value*/
#include "lvgl/src/lv_conf_checker.h"

#endif /*LV_CONF_H*/
% }